; Matthew Dickerson & Thomas Dickerson
; This file contains code for reading the prey distribution files and loading the data into the prey data structures. 

; COUNTERS -- DEFINED IN ANOTHER FILE
; num-prey-types - The number of species or distinct subspecies of prey, where each species has several age classes. 
;                - It is also therefore the number of fields in prey-data, seasons-data, distribution-counts and num-seasons. 
;                - The prey types (species) have a global ordering and appear in the same ordering in each list.
; prey-data[i][NUM-CLASSES#] holds the number of age classes for prey type i.  This is always at least 2: AF and AM.  
;
; DATA STRUCTURES
; num-seasons -- A 1D structure: a list of the number of seasons for each prey type.
;
; seasons-data -- 2D structure (list of lists).
;             - Each list contains the starting days of each season, in increasing order, for the prey-type of the given number.  
;             The value in num-seasons[i] should contain the length of seasons-data[i]. The value of seasons-data[i][j] is the starting day of season [j] for prey type i.
; NOTE: If the first season listed (season 0) begins with day > 0, then day 0 is part of the final season in the list.
;
; distribution-counts -- A 2D structure (list of lists)
;            -  Each list corresponds to the number of prey locations for the given prey type for the given season. 
;            -  That is, distribution-counts[i][j] is the number of different locations for prey type i for season j.
;
;
; distributions -- A 4D structure (list of lists of lists of lists) 
;              - distributions[i][j][k] corresponds to the kth location for season j for prey type i. 
;              - each location is a list of length c + 5 where c is the number of age classes
;                  the list contains long lat age-class-percentages p-coastal coastal-sd offshore-sd 
;              - distributions-counts[i][j] gives the length of list distributions[i][j][k].  
;  

globals [num-seasons
    seasons-data 
    distribution-counts 
    distributions    ; See descriptions above
  average-seasonal-area
]

patches-own [test-value]

to DEBUG-MONITOR [x y]
  if DEBUG-MONITOR-LEVEL > x [show y]
end
  
; Initialize the seasonal prey distribution lists -- make data structures empty lists
to init-distribution-structures 
   set num-seasons (list )
   set seasons-data (list )
   set distribution-counts (list )
   set distributions (list )
end

; seasons-file-name:  a string with the name of the file containing the data to be read.
; species: a string with the name of the species whose data is contained in the file. Should be the first line of the file.
; species-num: the number of this species in the various lists of species data.
to load-seasonal-distributions [seasons-file-name species species-num]  
  
  ; Open the file and make sure it is of the expected species -- which is the first line of the file
  file-open seasons-file-name         
  read-distribution-file-header  seasons-file-name species
  
  
  ; The second value in the file should be the number of seasons for this prey type.
  ; Add this value to the end of the list of the number of seasons for all types of prey. Make sure the list is of the correct length.
  let seasons-ct file-read            
  set num-seasons (lput seasons-ct num-seasons)
  if length num-seasons != (species-num + 1) [
    print (word "ERROR READING DISTRIBUTION FILE " seasons-file-name ": Error in num-seasons. Entered species number " 
                 species-num " but num-seasons has length " length num-seasons)
    stop
  ]  
    
  ; Get the list of start days for each of the seasons. The next seasons-ct values in the value should be the start days of the seasons.
  ; Read these values from the file and store them in a list. Append that list to the seasons-data data structure.
  let start-days (list )              
  repeat seasons-ct [
    let day-num file-read
    set start-days (lput day-num start-days)
  ]
  set seasons-data (lput start-days seasons-data)
  if length seasons-data != (species-num + 1) [
    print (word "ERROR READING DISTRIBUTION FILE " seasons-file-name ": Error in seasons-data. Entered species number " 
                 species-num " but seasons-data has length " length seasons-data)
    stop
  ]  
  
  
  ; Get the list of the number of locations for each of the seasons. The next seasons-ct values in the value should be the number of locations for each of the seasons.
  ; Read these values from the file and store them in a list. Append that list to the distribution-counts data structure.
  let num-locations (list )           ; The number of locations to be assocated with each season
  repeat seasons-ct [
     let location-ct file-read
     set num-locations (lput location-ct num-locations)
  ]
  set distribution-counts (lput num-locations distribution-counts)
  if length seasons-data != (species-num + 1) [
    print (word "ERROR READING DISTRIBUTION FILE " seasons-file-name ": Error in distribution-counts. Entered species number " 
                   species-num " but distribution-counts has length " length distribution-counts)
    stop
  ] 
  
  ; --------------
  ; Now we read the actual list of locations and the distribution values associated with each location from the file.
  ; We use nested loops. 
  ;     - The outer loop iterates through the number of seasons...
  ;     - the next inner loop iterates through the number of locations for that seasons,...
  ;     - and the innermost loop depends on the number of juvenile classes for the species. 
  ; The number of lines of the file associated with each season is determined by num-locations list, and the number of seasons is in seasons-ct
  
  let num-classes item NUM-CLASSES# (item species-num prey-data)   ; Get the number of classes for this prey-type. This determines how long each record is.
  
  let this-average-seasonal-area 0
  let areal-scale-factor pi / (kmpp * kmpp)
  
  ; Loop through each season and get all the location data for that season, starting with season 0.
  let season 0                                                  ; Loop counter
  let all-season-locations (list )                              ; The list to hold all data for this prey-type (i.e. species)
  while [season < seasons-ct] [                                 ; Outermost loop through all the seasons
    let line file-read                                          ; Error check. The first line should be "Season n".
    if substring line 0 6 != "Season" [
       print (word "Distribution file structure error on " seasons-file-name ". Expecting Season at start of line.")
       stop      
    ]
    
    let this-season-locations (list )                           ; This list contains locations just for this season.
    repeat item season num-locations [                          ; Inner loop iteratures through all the locations for this particular season for this prey-type
      ; First two values are the (lat,long) pair giving the location
      let this-location (list file-read)                        ; lat
      set this-location (lput file-read this-location)          ; long
      
      ; Next is a list of values, one for each age-class, of the proportion of the total prey counts that goes in this location for this age class
      repeat num-classes [
        set this-location (lput file-read this-location)        ; age class distribution proportions
      ]
      
      ; The final 3 numbers describe how prey are distributed around this location.
      set this-location (lput file-read this-location)          ; p-coastal   -- the proportion that should go on coastal patches
      let sd-coastal file-read
      set this-location (lput sd-coastal this-location)          ; sd-coastal  -- distance in kms containing a standard deviation of the coastally distributed prey
      
      let sd-offshore file-read
      set this-location (lput sd-offshore this-location)          ; sd-offshore -- distance in kms containing a standard deviation of the off-shore distributed prey

      set this-average-seasonal-area this-average-seasonal-area + floor ( sd-coastal * sd-coastal * areal-scale-factor)
      set this-average-seasonal-area this-average-seasonal-area + floor ( sd-offshore * sd-offshore * areal-scale-factor)
      
      set this-season-locations (lput this-location this-season-locations)
    ]
    set all-season-locations (lput this-season-locations all-season-locations)
    set season season + 1
  ]
  
  set average-seasonal-area replace-item species-num average-seasonal-area (this-average-seasonal-area / seasons-ct)
  
  set distributions (lput all-season-locations distributions)
 
  file-close

end

; Used by the load-seasonal-distributions procedure above just to read and check the header of each file.
to read-distribution-file-header [seasons-file-name species]  
  let check-name file-read
  if check-name != species [
    print (word "ERROR READING DISTRIBUTION FILE " seasons-file-name ": Mismatched or incorrect file type for distribution. Expected " 
                 species " on first line, but got " check-name ".")
    stop
  ]
end


; --------------------------------------------------------------------------------------
; Reset to 0 the counts of all age classes of the given prey-type in all patches.
; Store in the GLOBAL-POP# field of hunting-data the total number of prey found of all age classes of the given type. 
to gather-and-count [prey-type]
  
end

to RUN-MONITOR [x y]
  if RUN-MONITOR-LEVEL > x [file-show y]
end

; Distribute the total number of prey of all age-classes given in the GLOBAL-POP# field of hunting-data structure according to the
; distrubution percentages given in the distribution-counts and distributions data structures for the season that includes the given day number.
; Decrement from GLOBAL-POP# all distributed prey. If the total proportions at all locations is <1.0 then some prey should  remain in GLOBAL-POP# as off-world.
to seasonal-distribution [prey-type day-of-year]
  
  ask water [set visited? -1] ; this should be done in the calling function instead, when done with debugging
  
  DEBUG-MONITOR 0 (word "Seasonal distribution for prey-type " prey-type ", " (item NAME# (item prey-type prey-data)) " on season including day " day-of-year) 
  RUN-MONITOR 1 (word "Seasonal distribution for " (item NAME# (item prey-type prey-data)) " on day " day-of-year)
  
  ; Find the number of the season corresponding to the given day.
  let season-index get-season-from-day prey-type day-of-year
  DEBUG-MONITOR 1 (word "Prey-type " prey-type " has day " day-of-year " in season number " season-index) 

  
  ; Now distribute all of the prey-classes of the give prey-type according to the seasonal distribution for season numbered season-index
  ; For each age class, loop through all locations for distribution

  let ct-classes (item NUM-CLASSES# (item prey-type prey-data))               ; The number of age classes for this prey type
  let ct-locations (item season-index (item prey-type distribution-counts))   ; The number of locations for distribution for this prey type an this season
  DEBUG-MONITOR 2 (word "There are " ct-locations " locations for this prey type.")
  
  ; task 0 matches coastal patches
  ; task 1 matches non coastal patches
  let coastal-filters (list (task [[coastal?] of ?]) (task [[not coastal?] of ?]))
  
  let loc 0                                                         ; Index of the current location to be processed
  ; Loop through all locations to distribute the numbers of prey of this age class
  repeat ct-locations [                                             
    let this-loc (item loc (item season-index (item prey-type distributions)))   ; distributions[i][j][k] is the kth location for season j for prey type i
    ; list contains long lat age-class-percentages-for-all-age-classes p-coastal coastal-sd offshore-sd
    let long (item 0 this-loc)
    let lat (item 1 this-loc)
    show this-loc
    let central-patch long-lat-patch long lat
    let len (length this-loc)
    let p-coastal (item (len - 3) this-loc)
    let coastal-sd (item (len - 2) this-loc)
    let offshore-sd (item (len - 1) this-loc)
          
    ;;;;;;;;;;;;;;;;;
    ;; Talk to Ward about whether or not this is a reasonable thing to do!
    ;; (or whether data should be tweaked)
    let seed find-a-shore central-patch
    ;if [not water?] of central-patch [
      set central-patch item 0 seed
    ;]
    ;;;;;;;;;;;;;;;;;
    
    
    let patch-sd-list (list (coastal-sd / kmpp) (offshore-sd / kmpp))
    let p-list (list p-coastal (1 - p-coastal))
    
    let prey-patches [water-patches-within-to-list (map [round (? * 2.5)] patch-sd-list) coastal-filters] of central-patch
    let listed-prey-patches (item 2 prey-patches)
    set prey-patches (item 0 prey-patches)
    let loc-distributions (map [segment-weighted-gaussian (round ?1) (split-distribution count-listed-patchset ?2)] patch-sd-list listed-prey-patches)
    
    let class-num 0                                                      ; Index of the current age class to be processed
    repeat ct-classes [                                                  ; Loop through all age classes for this type
      let prey-list (item prey-type hunting-data)                       ; Extract from hunting data the list of data for this prey type
      let class-list (item class-num prey-list)                         ; Extract from list of data for this prey type the list of data for this age class
      let members (item GLOBAL-POP# class-list)                         ; Get the number of prey of this age class in the total population
      DEBUG-MONITOR 2 (word "Distributing age class " class-num " with " members " individuals.")
           
      let prop-here (item (class-num + 2) this-loc)                      ; Proportion of total population to distribute around this area for this age class
      let num-here round (prop-here * members)                           ; Total number to go here based on percental of total population of this age class
      let i-num-here ifelse-value((members - num-here) < 0) [members][num-here]                                      ; compute the integer version.
      DEBUG-MONITOR 2 (word this-loc " will get " prop-here " of the total members of this age class, which is " i-num-here " individuals.")

      distribute-prey-about-patch prey-type class-num i-num-here central-patch p-list listed-prey-patches loc-distributions
       
       
      set members (members - i-num-here)                            ; Must update the GLOBAL-POP# field for this prey. Should keep a count of undistributed prey.
      set class-list replace-item GLOBAL-POP# class-list members
      set prey-list replace-item class-num prey-list class-list 
      set hunting-data replace-item prey-type hunting-data prey-list
      set class-num (class-num + 1) 
    ]
    
    ask prey-patches [set visited? -1]
       
    set loc (loc + 1)
  ]
end

; Search the seasons-data structure for the prey of the given to find the index of the season containing the day of the given number.
to-report get-season-from-day [prey-type day-of-year]
  ; Get the index of the season number that contains day-of-year in the seasons-data structure. 
  let seasons-ct (item prey-type num-seasons)
  let season-index (seasons-ct - 1)   
  ; If the first season listed (season 0) begins with day > 0, then day 0 is part of the final season in the list.
  ; Otherwise, loop backwards through the seasons to find the latest season that does not start after the given day-of-year
  if day-of-year > (item 0 (item prey-type seasons-data)) [
    while [day-of-year <= (item season-index (item prey-type seasons-data))][
      set season-index (season-index - 1)
    ]
  ]
  report season-index
end

; Context: ONE PATCH
; Add n to the number of prey of the given class-type and given prey-type
to add-to-prey-class-count [prey-type class-type n]
  let temp-list (item prey-type prey-counts)
  let temp-value (item class-type temp-list)
  set temp-list (replace-item class-type temp-list (temp-value + n))
  set prey-counts (replace-item prey-type prey-counts temp-list) 
end

  
; Report the (patch, dist) pair in pairs with the largest distances less than dist
to-report nextshorter-in-pair-list [pairs dist]
  let i ((length pairs) - 1)                                       ; Last item in the list
  while [i >= 0 and (last item i pairs  > dist)][set i (i - 1)]    ; Work backwards through the list to find pair with largest distances less than dist
  report item i pairs
end

; Search pairs, a list of (patch,distance) pairs, to find all the patches in that list with distance is closest to dist.
to-report closest-pairs-to-given-value [pairs dist] 
   ; compute the minimum delta between dist and distance for all pairs in the list.
   let delta (abs (dist - last (first pairs)))                     ; Find the difference between dist and the distance in the first pair of pairs.
   let i 1                                                         ; Go through the rest of the list to find the minimum value of delta
   while [i < length pairs][ 
      let new-delta (abs (dist - last (item i pairs))) 
      if new-delta < delta [set delta new-delta]
      set i (i + 1)
   ]
   
   ; delta should now be the minimum difference in the list of pairs between dist and distance.  Report all pairs with that minimum.
   report filter [abs (dist - last ?) = delta] pairs 
end

; Computes the value of the gaussian function at x, when the mean is mn and the 
; standard deviation is sd.  (The variance is sd^2). 
to-report gaussian [x mn sd]
  report (1 / (sd * sqrt ( 2 * pi ))) * (e ^ (-0.5 * (((x - mn) / sd) ^ 2)))
end

to-report sum-gaussian-cdf-cell [x1 x2 mn sd]
  let y1 gaussian x1 mn sd
  let y2 gaussian x2 mn sd
  let dx+ abs (x1 - x2)
  let dy+ abs (y1 - y2)
  report ((ifelse-value (y1 < y2) [y1][y2]) + (0.5 * dy+)) * dx+
end

;;  DISTRIBUTE PREY AROUND A GIVEN PATCH WITH DENSITY IN A NORMAL/GAUSSIAN DISTRIBUTION
; prey-type is the number of the prey-type
; classs is the number of the age-class of the given prey-type
; prey-count is an integer representing the total number to be distributed.
; p is the patch around which prey are to be distribution
; The total of test-value for coastal patches should be ~ n * p-coast.
; The total of test-value for open-water patches should be ~ n * (1 - p-coast)
; The total of test-value for coastal patches within distance sd-coast of p should be ~ 1 standard deviation of n * p-coast
; The total of test-value for open-water patches within distance sd-water of p should be ~ 1 standard deviation of n * (1 - p-coast)

to distribute-prey-about-patch [prey-type class-type prey-count central-patch probabilities distribution-patchsets distribution-cells]  
  ; Assume probabilities has been properly normalized
  let patch-type-counter 0
  let num-patch-types length probabilities
  let prey-remaining prey-count
  ; Can't nest reporter-tasks, so foreach is out :(
  
  show (WORD "Distributing prey about patch " central-patch)
  
  repeat num-patch-types [
    
    let pc ifelse-value ((1 + patch-type-counter) < num-patch-types)[ round (prey-count * (item patch-type-counter probabilities)) ][ prey-remaining]
    set prey-remaining (prey-count - pc)
    
    if (pc > 0) [
      let cur-patchsets item patch-type-counter distribution-patchsets
      let cur-distribution item patch-type-counter distribution-cells
      set cur-distribution (distribute-discrete pc cur-distribution) 
      set cur-distribution fold-distribution cur-distribution (floor ((length cur-distribution) / 2))
      set cur-patchsets sublist cur-patchsets 0 length cur-distribution
      
      let dist-buffer []
      let p-buffer []
            
      (foreach cur-distribution cur-patchsets [
        let near-patches count ?2
        if (?1 < 0) [ print (WORD "A negative value of " ?1 " appeared")]
        ifelse (near-patches > 0) [
          set p-buffer lput ?2 p-buffer
          distribute-n-over-m-patches prey-type class-type ?1 ?2
        ][
          if (?1 > 0)[ set dist-buffer lput ?1 dist-buffer]
          print (WORD "no patches at distance for patchset " ?2 " (missing " ?1 " prey)")
        ]
      ])
      
      ; Correct for instances where we got an empty patchset where there were supposed to be patches!
      ; This happens when a cell is weighted for 0 (because none exist at the radius)
      ; But the rounding error correction determines it is still needed! 
      
      show dist-buffer
      show p-buffer
      let ap-count length p-buffer
      let db-count length dist-buffer
      ifelse (ap-count > 0 and db-count > 0)[
        set p-buffer n-values (db-count) [(item (? mod ap-count) p-buffer)]
        show p-buffer
      
        (foreach dist-buffer p-buffer [
          distribute-n-over-m-patches prey-type class-type ?1 ?2
        ])
      ][
        ifelse (db-count > 0) [ print " O_o no patches were ever found!"]
        [ print "no corrections necessary" ]
      ]
      
    ]
    
    set patch-type-counter 1 + patch-type-counter
  ]
  
end

to distribute-n-over-m-patches [prey-type class-type n m-patches]
  let near-patches count m-patches
  let per-patch (floor (n / near-patches))
  let patch-remainder (n mod near-patches)
  if (per-patch > 0) [
    ask m-patches [
      add-to-prey-class-count prey-type class-type per-patch
    ]
  ]
  ask n-of patch-remainder m-patches [
    add-to-prey-class-count prey-type class-type 1
  ]
end

to-report segment-weighted-gaussian [sd-patches areal-weights]
  ; Remember to preserve symmetry: We can make an even number of corrections to 
  ; an odd number of cells, but we can't make an odd number of corrections to an
  ; even number of cells
  
  let cell-count length areal-weights
  
  let half-patch-sigma 0.5 / sd-patches
  
  let ds floor (cell-count / 2)
  
  let normal-distribution n-values cell-count [sum-gaussian-cdf-cell ((? - ds) - half-patch-sigma) ((? - ds) + half-patch-sigma) 0 sd-patches]
  ; guarantee symmetry by averaging left and right halves of distribution
  ; these should have been approximately equal either way, 
  ; but we don't want to trust rounding to luck
  set normal-distribution (map [((?1 + ?2) * 0.5)] normal-distribution (reverse normal-distribution))
  DEBUG-MONITOR 2 normal-distribution
  
  
  ; areal-weights must be symmetric or certain assumptions are likely to become problematic
  ; however, we'll take care of normalization
  let final-distribution (map [(?1 * ?2) ] normal-distribution areal-weights)
  let norming-factor (sum final-distribution)
  set final-distribution (map [(?1 / norming-factor) ] final-distribution)
  DEBUG-MONITOR 2 final-distribution
  DEBUG-MONITOR 2 (WORD (sum final-distribution) "/" 1)
  
  report final-distribution
end

to-report distribute-discrete [prey-count weighted-gaussian]
  
  
  ; Of the prey distributed on coast, how many fall into each cell of our integrated Gaussian?
  ; Start with a rounded estimate
  let final-distribution map [round (? * prey-count)] weighted-gaussian
  let cell-count length weighted-gaussian
  let ds floor (cell-count / 2)
  DEBUG-MONITOR 2 final-distribution
  
  ; And then calculate the rounding error
  let prey-remaining (prey-count - (sum final-distribution))
  DEBUG-MONITOR 2 prey-remaining
  
  
  ; Drop cells whose expected populations are negligible
  ; for later efficiency and to prevent negatively weighted cells
  let zeroes map [? = 0] final-distribution
  let non-zero position false zeroes
  if ( prey-remaining < 0 )[
    ifelse (non-zero != false) [
      ; Should be symmetric anyway, assuming so offers a small speedup
      set final-distribution sublist final-distribution non-zero (cell-count - non-zero) 
    ] [
      DEBUG-MONITOR 2 "Somebody asked us to distribute no prey (1)! Something might be wrong"
      set final-distribution [0]
    ]  
    set cell-count length final-distribution
    set ds floor (cell-count / 2)
  ]
  
  ; Calculate the absolute distance from the center of a list with length matching final-distribution
  ; Save both the interior and exterior distances for that cell,
  ; The "exterior distance" (saved in inv-center-dist) counts from outer boundaries towards the center
  ; The "interior distance" counts from the center towards outer boundaries
  let g-center-dist (n-values cell-count [ 1 + 2 * (abs (? - ds)) ])
  let inv-center-dist (map [ 1 + (cell-count - ?)] g-center-dist)
  DEBUG-MONITOR 3 g-center-dist
  DEBUG-MONITOR 3 inv-center-dist
  
    
  ; Compensate final-distribution based on the rounding error and cell distances
  ; If the rounding error is positive, compensate downwards in the outermost cells
  ; If the rounding error is negative, compensate upwards in the innermost cells
  set final-distribution (map [
      ifelse-value (prey-remaining = 0) [
         ?1
        ][
          ifelse-value (prey-remaining < 0) [
            ifelse-value ((abs prey-remaining) >= ?3) [
              ?1 - 1
            ][
              ifelse-value (((prey-remaining mod 2) != 0) and (?2 = 1)) [ ?1 + 1 ][ ?1 ] 
            ] 
          ][ 
            ifelse-value (prey-remaining >= ?2) [
               ifelse-value (((prey-remaining mod 2) = 0) and (?2 = 1)) [ ?1 + 2 ][ ?1 + 1 ] 
            ][
             ?1 
            ]
          ]
        ]
      ]
      final-distribution g-center-dist inv-center-dist
    )
  
  DEBUG-MONITOR 2 final-distribution
  
  set zeroes map [? = 0] final-distribution
  set non-zero position false zeroes
  ifelse (non-zero != false) [
    ; Assume symmetry for speed-sake
    set final-distribution sublist final-distribution non-zero (cell-count - non-zero) 
  ] [
    DEBUG-MONITOR 2 "Somebody asked us to distribute no prey (2)! Something might be wrong"
    set final-distribution [0]
  ] 
  
  
  let fcount sum final-distribution
  DEBUG-MONITOR 2 final-distribution
  DEBUG-MONITOR 2 (WORD fcount "/" prey-count)
  
;  if ((sum fcount) != prey-count) [
;    show (WORD "error on inputs: "  prey-count " " sd-patches " " areal-weights)
;  ]
  report final-distribution

  
end

to-report distribute-discrete-easy [prey-count prey-variance]
  let sd-patches 1 + (round ((sqrt prey-variance) / kmpp))
  let p-count (2 * (round (((5 * sd-patches) + 1) / 2))) - 1
  let weights n-values p-count [1]
  let distribution-cells segment-weighted-gaussian sd-patches weights
  report distribute-discrete prey-count distribution-cells
end

; quick little stress-test
; reports if any distribution fails to total correctly
to-report fuzztest-distribute-discrete
  let totals n-values 20000 [sum (distribute-discrete-easy (floor (? / 200)) (? mod 200))]
  let expected-totals n-values 20000 [floor (? / 200)]
  let matches (map [?1 = ?2] totals expected-totals)
  report reduce [?1 and ?2] matches
end

; Note that fold-point effectively cuts the left-most cell in half
; and distribution routines that make use of a folded distribution
; should act accordingly (i.e., the left-most cell IS the axis of rotation for areal distribution, 
; and should all be dumped on a single patch).
to-report fold-distribution [distribution fold-point]
  
  if (fold-point > (floor ((length distribution) / 2))) [
    DEBUG-MONITOR 1 "'fold-point' was forward of center. Assuming symmetry and reversing 'distribution' to avoid truncation"
    set distribution reverse distribution
    set fold-point (-1) + ((length distribution) - fold-point)
  ]
  
  let dcount length distribution
  let indices n-values dcount [?]
  
  let dfp (2 * fold-point)
  
  report sublist (map [ifelse-value ((?2 > fold-point) and (?2 <= dfp)) [?1 + (item (dfp - ?2) distribution)][?1]] distribution indices) fold-point dcount
end

to-report split-distribution [distribution]
  let dcount length distribution
  let ncount (2 * dcount) - 1
  let mcount dcount - 1
  let cdist n-values ncount [ abs (? - mcount) ]
  report map [(item ? distribution) / (ifelse-value (? = 0)[1][2])] cdist
end
